# Importing necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications import VGG16, preprocess_input
from tensorflow.keras import models

# Load pre-trained VGG16 model
model = VGG16(weights='imagenet', include_top=False)

def apply_filter(image_path, filter_index):
    # Load the image and preprocess it
    img = image.load_img(image_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    # Get the feature maps of the image from the desired convolutional layer
    intermediate_layer_model = models.Model(inputs=model.input,
                                             outputs=model.layers[filter_index].output)
    feature_maps = intermediate_layer_model.predict(img_array)

    # Plot the original image and the feature maps
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(img)
    plt.title('Original Image')

    plt.subplot(1, 2, 2)
    plt.imshow(feature_maps[0, :, :, filter_index], cmap='viridis')
    plt.title(f'Filter {filter_index} Activation Map')
    plt.show()

# Example usage: Apply filter on an image
image_path = 'path_to_your_image.jpg'
apply_filter(image_path, filter_index=0) 
